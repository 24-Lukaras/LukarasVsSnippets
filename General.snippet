<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Constructor non-null assignment</Title>
      <Shortcut>cnn</Shortcut>
      <Description>Snippet for field assignment which throws argument null exception in case argument is null. Good for use in dependency injection constructors. Uses microsoft conventions of naming private readonly field with underscore at the start.</Description>
      <Author>Lukaras</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>fieldName</ID>
          <ToolTip>Name of field to be assigned.</ToolTip>
          <Default>variable</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[_$fieldName$ = $fieldName$ ?? throw new ArgumentNullException(nameof($fieldName$));]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Constructor non-null assignment (this)</Title>
      <Shortcut>tcnn</Shortcut>
      <Description>Snippet for field assignment which throws argument null exception in case argument is null. Good for use in dependency injection constructors. Uses "this" keyword to diferentiate between argument and field.</Description>
      <Author>Lukaras</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>fieldName</ID>
          <ToolTip>Name of field to be assigned.</ToolTip>
          <Default>variable</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[this.$fieldName$ = $fieldName$ ?? throw new ArgumentNullException(nameof($fieldName$));]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  
</CodeSnippets>